"""
M√≥dulo para generaci√≥n de reportes PDF
"""
import os
import time
import base64
import tempfile
from typing import Dict, Optional, Any
import numpy as np
from PIL import Image
import streamlit as st

from ..config.settings import PDF_CONFIG
from ..utils.text_utils import clean_text_robust
from ..visualization.charts import ChartGenerator
from ..models.model_manager import ModelManager

# Detectar bibliotecas PDF disponibles
try:
    from reportlab.lib.pagesizes import letter
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as ReportLabImage
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib.colors import HexColor
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

try:
    from fpdf import FPDF
    FPDF_AVAILABLE = True
except ImportError:
    FPDF_AVAILABLE = False

class PDFReportGenerator:
    """Generador de reportes PDF para diagn√≥sticos"""
    
    def __init__(self):
        self.config = PDF_CONFIG
        self.model_manager = ModelManager()
        self.chart_generator = ChartGenerator()
        
    def generate_report(self, 
                       image: Image.Image,
                       disease_info: Dict[str, Any],
                       confidence: float,
                       probabilities: np.ndarray,
                       model_name: str = None,
                       all_predictions: Dict[str, np.ndarray] = None,
                       consensus_prediction: np.ndarray = None) -> Optional[str]:
        """
        Generar reporte PDF del diagn√≥stico
        
        Args:
            image (PIL.Image): Imagen analizada
            disease_info (dict): Informaci√≥n de la enfermedad
            confidence (float): Nivel de confianza
            probabilities (np.ndarray): Probabilidades de predicci√≥n
            model_name (str): Nombre del modelo usado
            all_predictions (dict): Predicciones de m√∫ltiples modelos
            consensus_prediction (np.ndarray): Predicci√≥n de consenso
            
        Returns:
            str: Ruta del archivo PDF o None si hay error
        """
        try:
            pdf_path = None
            
            if REPORTLAB_AVAILABLE:
                pdf_path = self._generate_reportlab_pdf(
                    image, disease_info, confidence, probabilities,
                    model_name, all_predictions, consensus_prediction
                )
            elif FPDF_AVAILABLE:
                pdf_path = self._generate_fpdf_pdf(
                    image, disease_info, confidence, probabilities,
                    model_name, all_predictions, consensus_prediction
                )
            else:
                self._show_pdf_error()
                return None
            
            # Crear bot√≥n de descarga si se gener√≥ el PDF exitosamente
            if pdf_path:
                self.create_download_button(pdf_path)
                return pdf_path
            else:
                return None
                
        except Exception as e:
            st.error(f"‚ùå Error al generar PDF: {str(e)}")
            return None
    
    def _show_pdf_error(self):
        """Mostrar error y opciones de instalaci√≥n de librer√≠as PDF"""
        st.error("‚ùå No hay bibliotecas de PDF disponibles")
        st.info("üí° Instala una de las siguientes bibliotecas:")
        st.info("   - ReportLab (recomendado): `pip install reportlab==4.0.4`")
        st.info("   - FPDF: `pip install fpdf2`")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîß Instalar ReportLab"):
                self._install_package("reportlab==4.0.4")
        with col2:
            if st.button("üîß Instalar FPDF"):
                self._install_package("fpdf2")
    
    def _install_package(self, package_name: str):
        """Instalar paquete autom√°ticamente"""
        with st.spinner(f"‚è≥ Instalando {package_name}..."):
            try:
                import subprocess
                import sys
                result = subprocess.run(
                    [sys.executable, "-m", "pip", "install", package_name],
                    capture_output=True,
                    text=True
                )
                if result.returncode == 0:
                    st.success(f"‚úÖ {package_name} instalado exitosamente")
                    st.info("üîÑ Reinicia la aplicaci√≥n para usar la nueva biblioteca")
                else:
                    st.error(f"‚ùå Error instalando {package_name}: {result.stderr}")
            except Exception as e:
                st.error(f"‚ùå Error: {str(e)}")
    
    def _generate_reportlab_pdf(self, 
                              image: Image.Image,
                              disease_info: Dict[str, Any],
                              confidence: float,
                              probabilities: np.ndarray,
                              model_name: str = None,
                              all_predictions: Dict[str, np.ndarray] = None,
                              consensus_prediction: np.ndarray = None) -> str:
        """Generar PDF usando ReportLab"""
        
        # Lista para mantener archivos temporales hasta el final
        temp_files = []
        
        # Crear documento
        out_path = self.config['output_filename']
        doc = SimpleDocTemplate(out_path, pagesize=letter)
        story = []
        
        # Obtener estilos
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=self.config['font_sizes']['title'],
            spaceAfter=30,
            textColor=HexColor(self.config['colors']['primary']),
            alignment=1  # Centrado
        )
        
        # T√≠tulo
        title = "üåø Diagn√≥stico Comparativo de Ca√±a de Az√∫car" if all_predictions and len(all_predictions) > 1 else "üåø Diagn√≥stico de Ca√±a de Az√∫car"
        story.append(Paragraph(title, title_style))
        story.append(Spacer(1, 20))
        
        # Informaci√≥n del an√°lisis
        self._add_analysis_info(story, styles, model_name, all_predictions)
        
        # Imagen analizada
        self._add_image_section(story, styles, image, temp_files)
        
        # Diagn√≥stico principal
        self._add_diagnosis_section(story, styles, disease_info, confidence)
        
        # Gr√°ficos
        self._add_charts_section(story, styles, probabilities, all_predictions, consensus_prediction, temp_files)
        
        # Informaci√≥n t√©cnica
        self._add_technical_info(story, styles, model_name)
        
        # Generar PDF
        doc.build(story)
        
        # Limpiar archivos temporales despu√©s de generar el PDF
        for temp_file in temp_files:
            try:
                os.unlink(temp_file)
            except:
                pass
        
        return out_path
    
    def _generate_fpdf_pdf(self,
                          image: Image.Image,
                          disease_info: Dict[str, Any],
                          confidence: float,
                          probabilities: np.ndarray,
                          model_name: str = None,
                          all_predictions: Dict[str, np.ndarray] = None,
                          consensus_prediction: np.ndarray = None) -> str:
        """Generar PDF usando FPDF"""
        
        # Lista para mantener archivos temporales hasta el final
        temp_files = []
        
        pdf = FPDF()
        pdf.add_page()
        
        # Encabezado
        self._add_fpdf_header(pdf, all_predictions)
        
        # Informaci√≥n de modelos
        self._add_fpdf_model_info(pdf, model_name, all_predictions)
        
        # Imagen
        self._add_fpdf_image(pdf, image, temp_files)
        
        # Diagn√≥stico
        self._add_fpdf_diagnosis(pdf, disease_info, confidence)
        
        # Tratamiento y prevenci√≥n
        self._add_fpdf_treatment(pdf, disease_info)
        
        # Gr√°ficos
        self._add_fpdf_charts(pdf, probabilities, all_predictions, consensus_prediction, temp_files)
        
        # Informaci√≥n t√©cnica
        self._add_fpdf_technical_info(pdf, model_name)
        
        # Pie de p√°gina
        self._add_fpdf_footer(pdf)
        
        # Guardar PDF
        out_path = self.config['output_filename']
        pdf.output(out_path)
        
        # Limpiar archivos temporales despu√©s de generar el PDF
        for temp_file in temp_files:
            try:
                os.unlink(temp_file)
            except:
                pass
        
        return out_path
    
    def _add_analysis_info(self, story, styles, model_name, all_predictions):
        """A√±adir informaci√≥n del an√°lisis (ReportLab)"""
        if all_predictions and len(all_predictions) > 1:
            story.append(Paragraph("<b>An√°lisis con M√∫ltiples Modelos:</b>", styles['Heading2']))
            story.append(Paragraph(f"<b>Modelos utilizados:</b> {len(all_predictions)} modelos", styles['Normal']))
            
            for i, (model_name_iter, prediction) in enumerate(all_predictions.items()):
                model_info = self.model_manager.load_model_info(model_name_iter)
                story.append(Paragraph(f"<b>Modelo {i+1} ({model_name_iter}):</b>", styles['Heading3']))
                if model_info:
                    story.append(Paragraph(f"  ‚Ä¢ Precisi√≥n: {model_info['test_accuracy']:.2%}", styles['Normal']))
        else:
            if model_name:
                story.append(Paragraph(f"<b>Modelo utilizado:</b> {model_name}", styles['Normal']))
                model_info = self.model_manager.load_model_info(model_name)
                if model_info:
                    story.append(Paragraph(f"<b>Precisi√≥n:</b> {model_info['test_accuracy']:.2%}", styles['Normal']))
        
        story.append(Spacer(1, 20))
    
    def _add_image_section(self, story, styles, image, temp_files):
        """A√±adir secci√≥n de imagen (ReportLab)"""
        story.append(Paragraph("<b>Imagen Analizada:</b>", styles['Heading2']))
        
        # Crear archivo temporal sin eliminarlo inmediatamente
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_img_file:
            image.save(tmp_img_file.name)
            story.append(ReportLabImage(tmp_img_file.name, width=4*inch, height=3*inch))
            temp_files.append(tmp_img_file.name)  # Agregar a la lista para limpiar despu√©s
        
        story.append(Spacer(1, 20))

    def _add_diagnosis_section(self, story, styles, disease_info, confidence):
        """A√±adir secci√≥n de diagn√≥stico (ReportLab)"""
        story.append(Paragraph(f"<b>Diagn√≥stico:</b> {disease_info['name']}", styles['Heading2']))
        story.append(Paragraph(f"<b>Confianza:</b> {confidence:.1f}%", styles['Normal']))
        story.append(Paragraph(f"<b>Descripci√≥n:</b> {disease_info['description']}", styles['Normal']))
        story.append(Spacer(1, 20))
        
        # S√≠ntomas
        story.append(Paragraph("<b>S√≠ntomas:</b>", styles['Heading3']))
        for symptom in disease_info['symptoms'][:3]:
            story.append(Paragraph(f"‚Ä¢ {symptom}", styles['Normal']))
        
        story.append(Spacer(1, 15))
    
    def _add_charts_section(self, story, styles, probabilities, all_predictions, consensus_prediction, temp_files):
        """A√±adir secci√≥n de gr√°ficos (ReportLab)"""
        story.append(Paragraph("<b>An√°lisis Visual:</b>", styles['Heading2']))
        
        # Crear y guardar gr√°fico
        if consensus_prediction is not None:
            fig = self.chart_generator.create_probability_chart(
                consensus_prediction, 
                "Distribuci√≥n de Probabilidades (Consenso)"
            )
        else:
            fig = self.chart_generator.create_probability_chart(
                probabilities, 
                "Distribuci√≥n de Probabilidades"
            )
        
        # Crear archivo temporal sin eliminarlo inmediatamente
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_chart:
            fig.savefig(tmp_chart.name, bbox_inches='tight', dpi=150)
            temp_files.append(tmp_chart.name)  # Agregar a la lista para limpiar despu√©s
        
        # Cerrar la figura
        import matplotlib.pyplot as plt
        plt.close(fig)
        
        # A√±adir al PDF
        story.append(ReportLabImage(tmp_chart.name, width=6*inch, height=4*inch))
        story.append(Spacer(1, 20))
    
    def _add_technical_info(self, story, styles, model_name):
        """A√±adir informaci√≥n t√©cnica (ReportLab)"""
        if model_name:
            model_info = self.model_manager.load_model_info(model_name)
            if model_info:
                story.append(Paragraph("<b>Informaci√≥n T√©cnica:</b>", styles['Heading2']))
                story.append(Paragraph(f"Precisi√≥n: {model_info['test_accuracy']:.2%}", styles['Normal']))
                story.append(Paragraph(f"P√©rdida: {model_info['test_loss']:.4f}", styles['Normal']))
            
            # Matriz de confusi√≥n
            confusion_path = self.model_manager.get_confusion_matrix_path(model_name)
            if confusion_path and os.path.exists(confusion_path):
                story.append(Paragraph("<b>Matriz de Confusi√≥n:</b>", styles['Heading3']))
                story.append(ReportLabImage(confusion_path, width=6*inch, height=4*inch))
    
    def _add_fpdf_header(self, pdf, all_predictions):
        """A√±adir encabezado FPDF"""
        if os.path.exists("logo.png"):
            pdf.image("logo.png", x=10, y=8, w=30, h=30)
        
        pdf.set_xy(45, 12)
        pdf.set_font("Arial", 'B', 20)
        pdf.set_text_color(46, 125, 50)
        
        title = "Diagnostico Comparativo de Cana de Azucar" if all_predictions and len(all_predictions) > 1 else "Diagnostico de Cana de Azucar"
        pdf.cell(0, 15, clean_text_robust(title), ln=1, align='C')
        pdf.ln(10)
        
        # L√≠nea divisoria
        pdf.set_draw_color(46, 125, 50)
        pdf.set_line_width(1)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        pdf.ln(5)
    
    def _add_fpdf_model_info(self, pdf, model_name, all_predictions):
        """A√±adir informaci√≥n de modelos FPDF"""
        if all_predictions and len(all_predictions) > 1:
            pdf.set_font("Arial", 'B', 12)
            pdf.set_text_color(33, 150, 243)
            pdf.cell(0, 8, clean_text_robust(f"Modelos utilizados: {len(all_predictions)}"), ln=1)
            pdf.ln(2)
        elif model_name:
            pdf.set_font("Arial", 'B', 12)
            pdf.set_text_color(33, 150, 243)
            pdf.cell(0, 8, clean_text_robust(f"Modelo: {model_name}"), ln=1)
            pdf.ln(2)
    
    def _add_fpdf_image(self, pdf, image, temp_files):
        """A√±adir imagen FPDF"""
        pdf.set_font("Arial", 'B', 12)
        pdf.set_text_color(33, 33, 33)
        pdf.cell(0, 4, clean_text_robust("Imagen Analizada:"), ln=1)
        
        # Crear archivo temporal sin eliminarlo inmediatamente
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_img_file:
            image.save(tmp_img_file.name)
            pdf.image(tmp_img_file.name, x=60, w=90, h=60)
            temp_files.append(tmp_img_file.name)  # Agregar a la lista para limpiar despu√©s
        
        pdf.ln(10)
    
    def _add_fpdf_diagnosis(self, pdf, disease_info, confidence):
        """A√±adir diagn√≥stico FPDF"""
        pdf.set_font("Arial", 'B', 14)
        pdf.set_text_color(46, 125, 50)
        pdf.cell(0, 10, clean_text_robust(disease_info['name']), ln=1)
        
        pdf.set_font("Arial", size=12)
        pdf.set_text_color(33, 33, 33)
        pdf.cell(0, 8, clean_text_robust(f"Confianza: {confidence:.1f}%"), ln=1)
        pdf.ln(2)
        
        pdf.set_font("Arial", size=11)
        pdf.multi_cell(0, 7, clean_text_robust(disease_info['description']))
        pdf.ln(5)
    
    def _add_fpdf_treatment(self, pdf, disease_info):
        """A√±adir tratamiento FPDF"""
        # S√≠ntomas
        pdf.set_font("Arial", 'B', 12)
        pdf.set_text_color(198, 40, 40)
        pdf.cell(0, 8, clean_text_robust("Sintomas:"), ln=1)
        pdf.set_font("Arial", size=11)
        pdf.set_text_color(33, 33, 33)
        
        for symptom in disease_info['symptoms'][:3]:
            pdf.cell(0, 6, clean_text_robust(f"- {symptom}"), ln=1)
        pdf.ln(3)
        
        # Tratamiento
        pdf.set_font("Arial", 'B', 12)
        pdf.set_text_color(33, 150, 243)
        pdf.cell(0, 8, clean_text_robust("Tratamiento:"), ln=1)
        pdf.set_font("Arial", size=11)
        pdf.set_text_color(33, 33, 33)
        
        for treatment in disease_info['treatment'][:3]:
            pdf.cell(0, 6, clean_text_robust(f"- {treatment}"), ln=1)
        pdf.ln(3)
    
    def _add_fpdf_charts(self, pdf, probabilities, all_predictions, consensus_prediction, temp_files):
        """A√±adir gr√°ficos FPDF"""
        # Gr√°fico de probabilidades
        pdf.set_font("Arial", 'B', 12)
        pdf.set_text_color(76, 175, 80)
        pdf.cell(0, 8, clean_text_robust("Analisis de Probabilidades:"), ln=1)
        
        # Crear y guardar gr√°fico
        if consensus_prediction is not None:
            fig = self.chart_generator.create_probability_chart(consensus_prediction)
        else:
            fig = self.chart_generator.create_probability_chart(probabilities)
        
        # Crear archivo temporal sin eliminarlo inmediatamente
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_chart:
            fig.savefig(tmp_chart.name, bbox_inches='tight', dpi=150)
            temp_files.append(tmp_chart.name)  # Agregar a la lista para limpiar despu√©s
        
        # Cerrar la figura
        import matplotlib.pyplot as plt
        plt.close(fig)
        
        # A√±adir al PDF
        pdf.image(tmp_chart.name, x=25, w=160, h=80)
        pdf.ln(10)
    
    def _add_fpdf_technical_info(self, pdf, model_name):
        """A√±adir informaci√≥n t√©cnica FPDF"""
        if model_name:
            model_info = self.model_manager.load_model_info(model_name)
            if model_info:
                pdf.set_font("Arial", 'B', 12)
                pdf.set_text_color(76, 175, 80)
                pdf.cell(0, 8, clean_text_robust("Informacion Tecnica:"), ln=1)
                
                pdf.set_font("Arial", size=10)
                pdf.set_text_color(33, 33, 33)
                pdf.cell(0, 6, clean_text_robust(f"Precision: {model_info['test_accuracy']:.2%}"), ln=1)
                pdf.cell(0, 6, clean_text_robust(f"Perdida: {model_info['test_loss']:.4f}"), ln=1)
                pdf.ln(5)
    
    def _add_fpdf_footer(self, pdf):
        """A√±adir pie de p√°gina FPDF"""
        pdf.set_y(-25)
        pdf.set_draw_color(46, 125, 50)
        pdf.set_line_width(0.7)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        
        pdf.set_font("Arial", size=8)
        pdf.set_text_color(120, 120, 120)
        pdf.cell(0, 8, clean_text_robust(f"Generado: {time.strftime('%Y-%m-%d %H:%M:%S')}"), ln=1, align='C')
        pdf.cell(0, 6, clean_text_robust("Sistema de Diagnostico de Cana de Azucar"), ln=1, align='C')
    
    def create_download_button(self, pdf_path: str):
        """Crear bot√≥n de descarga para el PDF"""
        if os.path.exists(pdf_path):
            with open(pdf_path, "rb") as f:
                b64 = base64.b64encode(f.read()).decode()
            
            # Limpiar archivo temporal
            try:
                os.remove(pdf_path)
            except:
                pass
            
            st.success("‚úÖ Reporte PDF generado exitosamente")
            st.download_button(
                label="‚¨áÔ∏è Descargar Reporte PDF",
                data=base64.b64decode(b64),
                file_name=self.config['output_filename'],
                mime="application/pdf",
                use_container_width=True,
                help="Haz clic para descargar el reporte PDF del diagn√≥stico"
            ) 