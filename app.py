import streamlit as st
import numpy as np
import tensorflow as tf
import cv2
from PIL import Image
import matplotlib.pyplot as plt
import os
import logging
import random
import warnings
import time
import base64
import pandas as pd
import plotly.express as px
try:
    from reportlab.lib.pagesizes import letter
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as ReportLabImage
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib.colors import HexColor
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

try:
    from fpdf import FPDF
    FPDF_AVAILABLE = True
except ImportError:
    FPDF_AVAILABLE = False

# Configurar TensorFlow para evitar warnings
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
tf.get_logger().setLevel('ERROR')

# Suprimir warnings espec√≠ficos de Keras/TensorFlow
import warnings
warnings.filterwarnings('ignore', category=UserWarning, module='keras')
warnings.filterwarnings('ignore', category=FutureWarning, module='tensorflow')
warnings.filterwarnings('ignore', message='.*oneDNN.*')

# Configuraci√≥n de la p√°gina con tema oscuro
st.set_page_config(
    page_title="Diagn√≥stico Ca√±a de Az√∫car",
    page_icon="üåø",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Aplicar estilos CSS personalizados con tema oscuro
st.markdown("""
    <style>
        /* Tema oscuro general */
        .main {
            background-color: #0E1117;
            color: #E0E0E0;
        }
        
        /* Estilo para contenedores */
        .stButton>button {
            width: 100%;
            background-color: #2E7D32;
            color: white;
            padding: 0.75rem;
            border-radius: 10px;
            border: none;
            font-size: 1.1em;
            margin: 1rem 0;
            transition: all 0.3s ease;
        }
        .stButton>button:hover {
            background-color: #388E3C;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0,0,0,0.2);
        }
        
        /* Cajas de diagn√≥stico */
        .diagnosis-box {
            padding: 2rem;
            border-radius: 15px;
            margin: 1rem 0;
            box-shadow: 0 4px 6px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
            background-color: #1E1E1E;
        }
        .diagnosis-box:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 8px rgba(0,0,0,0.3);
        }
        .healthy {
            background-color: rgba(46, 125, 50, 0.2);
            border: 2px solid #2E7D32;
        }
        .disease {
            background-color: rgba(198, 40, 40, 0.2);
            border: 2px solid #C62828;
        }
        
        /* Tarjetas de informaci√≥n */
        .info-card {
            background-color: #1E1E1E;
            padding: 1.5rem;
            border-radius: 10px;
            margin: 1rem 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            border: 1px solid #333333;
        }
        
        /* Textos y encabezados */
        h1 {
            color: #E0E0E0;
            text-align: center;
            margin-bottom: 2rem;
            font-size: 2.5em;
            font-weight: 700;
            padding: 1rem;
            background: linear-gradient(90deg, #1E1E1E, #2E2E2E);
            border-radius: 10px;
        }
        h2 {
            color: #4CAF50;
            margin-top: 2rem;
            font-weight: 600;
        }
        h3 {
            color: #81C784;
            margin-top: 1.5rem;
        }
        
        /* Contenedor de m√©tricas */
        .metric-container {
            background-color: #1E1E1E;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            margin: 1rem 0;
            border: 1px solid #333333;
        }
        
        /* Pie de p√°gina */
        .footer {
            text-align: center;
            padding: 2rem;
            background-color: #1E1E1E;
            margin-top: 3rem;
            border-top: 1px solid #333333;
        }
        
        /* Listas */
        .info-list {
            list-style-type: none;
            padding: 0;
        }
        .info-list li {
            padding: 0.5rem 1rem;
            margin: 0.5rem 0;
            background-color: #252525;
            border-radius: 5px;
            border-left: 4px solid #4CAF50;
        }
        
        /* Separadores */
        hr {
            border-color: #333333;
            margin: 2rem 0;
        }
        
        /* Contenedor de im√°genes */
        .image-container {
            background-color: #1E1E1E;
            padding: 1rem;
            border-radius: 10px;
            border: 1px solid #333333;
        }
        
        /* Tooltip personalizado */
        .tooltip {
            position: relative;
            display: inline-block;
        }
        .tooltip:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            padding: 0.5rem;
            background-color: #333333;
            color: white;
            border-radius: 5px;
            font-size: 0.9em;
            white-space: nowrap;
        }
        
        /* Ajustes para el modo oscuro de Streamlit */
        .stSelectbox, .stTextInput {
            background-color: #1E1E1E;
        }
    </style>
""", unsafe_allow_html=True)

# Ruta del modelo
MODEL_DIR = "models"

# Listar modelos disponibles autom√°ticamente
AVAILABLE_MODEL_FILES = [f for f in os.listdir(MODEL_DIR) if f.endswith('.keras')]
if not AVAILABLE_MODEL_FILES:
    AVAILABLE_MODEL_FILES = [
        "best_sugarcane_modelV1.keras",
        "best_sugarcane_modelV2.keras",
        "best_sugarcane_modelV3.keras"
    ]

# Inicializar el modelo seleccionado en la sesi√≥n
if 'selected_model_file' not in st.session_state:
    st.session_state.selected_model_file = AVAILABLE_MODEL_FILES[0] if AVAILABLE_MODEL_FILES else None

MODEL_PATH = os.path.join(MODEL_DIR, st.session_state.selected_model_file) if st.session_state.selected_model_file else None
os.makedirs(MODEL_DIR, exist_ok=True)

# Definici√≥n de enfermedades y sus detalles (actualizada para todas las clases posibles)
DISEASE_INFO = {
    0: {
        'name': 'Sana (Healthy)',
        'color': '#4CAF50',
        'description': 'La planta muestra signos de buena salud sin s√≠ntomas de enfermedad.',
        'symptoms': [
            'Hojas de color verde intenso y uniforme',
            'Crecimiento vigoroso y uniforme',
            'Ausencia de manchas, lesiones o decoloraciones',
            'Tallos firmes y bien desarrollados',
            'Estructura foliar normal'
        ],
        'treatment': [
            'Mantener el programa regular de fertilizaci√≥n',
            'Continuar con el riego adecuado',
            'Realizar monitoreos preventivos peri√≥dicos',
            'Mantener buenas pr√°cticas agr√≠colas'
        ],
        'prevention': [
            'Uso de variedades resistentes',
            'Mantener buen drenaje del suelo',
            'Control de malezas',
            'Rotaci√≥n de cultivos cuando sea posible'
        ],
        'icon': '‚úÖ'
    },
    1: {
        'name': 'Mosaico (Mosaic)',
        'color': '#FF9800',
        'description': 'Enfermedad viral que causa patrones de mosaico en las hojas, reduciendo la fotos√≠ntesis.',
        'symptoms': [
            'Patrones de mosaico verde claro y oscuro',
            'Manchas irregulares en las hojas',
            'Reducci√≥n del crecimiento de la planta',
            'Hojas con apariencia moteada',
            'Clorosis interveinal'
        ],
        'treatment': [
            'Eliminaci√≥n inmediata de plantas infectadas',
            'Control de insectos vectores (pulgones)',
            'Uso de variedades resistentes',
            'Implementaci√≥n de barreras f√≠sicas'
        ],
        'prevention': [
            'Control estricto de insectos vectores',
            'Uso de material de siembra certificado',
            'Desinfecci√≥n de herramientas',
            'Manejo de malezas hospederas'
        ],
        'icon': 'üü°'
    },
    2: {
        'name': 'Pudrici√≥n Roja (Red Rot)',
        'color': '#F44336',
        'description': 'Enfermedad f√∫ngica causada por Colletotrichum falcatum que afecta severamente el rendimiento.',
        'symptoms': [
            'Manchas rojas en las hojas y tallos',
            'Tejido interno rojizo en los tallos',
            'Marchitamiento de las hojas',
            'P√©rdida de vigor en la planta',
            'Lesiones necr√≥ticas'
        ],
        'treatment': [
            'Aplicaci√≥n de fungicida sist√©mico (carbendazim)',
            'Eliminaci√≥n inmediata de plantas infectadas',
            'Mejora del drenaje del suelo',
            'Reducci√≥n del estr√©s por sequ√≠a'
        ],
        'prevention': [
            'Uso de variedades resistentes',
            'Tratamiento de esquejes antes de la siembra',
            'Manejo adecuado del agua',
            'Control de insectos vectores'
        ],
        'icon': 'üî¥'
    },
    3: {
        'name': 'Roya (Rust)',
        'color': '#8D6E63',
        'description': 'Enfermedad f√∫ngica que forma p√∫stulas de color √≥xido en las hojas.',
        'symptoms': [
            'P√∫stulas de color √≥xido en el env√©s de las hojas',
            'Manchas amarillas en el haz de las hojas',
            'Defoliaci√≥n prematura',
            'Reducci√≥n del √°rea foliar fotosint√©tica',
            'Clorosis generalizada'
        ],
        'treatment': [
            'Aplicaci√≥n de fungicidas protectantes',
            'Mejora de la ventilaci√≥n del cultivo',
            'Reducci√≥n de la densidad de siembra',
            'Eliminaci√≥n de residuos infectados'
        ],
        'prevention': [
            'Uso de variedades resistentes',
            'Manejo adecuado de la fertilizaci√≥n',
            'Control de la humedad relativa',
            'Monitoreo temprano de s√≠ntomas'
        ],
        'icon': 'üü†'
    },
    4: {
        'name': 'Amarillamiento (Yellow)',
        'color': '#FFEB3B',
        'description': 'Condici√≥n que puede ser causada por deficiencias nutricionales o estr√©s ambiental.',
        'symptoms': [
            'Amarillamiento generalizado de las hojas',
            'Clorosis interveinal',
            'Reducci√≥n del crecimiento',
            'Hojas con apariencia p√°lida',
            'S√≠ntomas que progresan desde hojas viejas'
        ],
        'treatment': [
            'An√°lisis de suelo para identificar deficiencias',
            'Aplicaci√≥n de fertilizantes espec√≠ficos',
            'Correcci√≥n del pH del suelo',
            'Mejora del drenaje si es necesario'
        ],
        'prevention': [
            'An√°lisis regular de suelo',
            'Programa de fertilizaci√≥n balanceado',
            'Manejo adecuado del riego',
            'Monitoreo de pH del suelo'
        ],
        'icon': 'üíõ'
    }
}

def load_model_info(model_name):
    """Carga la informaci√≥n estad√≠stica de un modelo desde los archivos .txt"""
    try:
        # Extraer n√∫mero de versi√≥n del nombre del modelo
        if "V1" in model_name or "v1" in model_name:
            info_file = "info/modelV1.txt"
        elif "V2" in model_name or "v2" in model_name:
            info_file = "info/modelV2.txt"
        elif "V3" in model_name or "v3" in model_name:
            info_file = "info/modelV3.txt"
        else:
            return None
        
        if os.path.exists(info_file):
            with open(info_file, 'r') as f:
                content = f.read()
                
            # Extraer informaci√≥n b√°sica
            lines = content.split('\n')
            test_loss = None
            test_accuracy = None
            
            for line in lines:
                if "Test Loss" in line:
                    test_loss = float(line.split(':')[1].strip())
                elif "Test Accuracy" in line:
                    test_accuracy = float(line.split(':')[1].strip())
            
            return {
                'test_loss': test_loss,
                'test_accuracy': test_accuracy,
                'full_report': content
            }
        return None
    except Exception as e:
        return None

def get_confusion_matrix_path(model_name):
    """Obtiene la ruta de la matriz de confusi√≥n para un modelo espec√≠fico"""
    try:
        if "V1" in model_name or "v1" in model_name:
            return "info/modelV1.png"
        elif "V2" in model_name or "v2" in model_name:
            return "info/modelV2.png"
        elif "V3" in model_name or "v3" in model_name:
            return "info/modelV3.png"
        return None
    except:
        return None

def clean_text_robust(text):
    """Limpia el texto de forma muy robusta eliminando todos los caracteres problem√°ticos"""
    import unicodedata
    import re
    
    # Convertir a string si no lo es
    if not isinstance(text, str):
        text = str(text)
    
    # Normalizar y eliminar acentos
    text = unicodedata.normalize('NFD', text)
    text = ''.join(c for c in text if unicodedata.category(c) != 'Mn')
    
    # Eliminar cualquier car√°cter que no sea ASCII b√°sico, n√∫meros, letras, espacios y puntuaci√≥n b√°sica
    text = re.sub(r'[^\x00-\x7F]+', '', text)
    
    # Reemplazar caracteres espec√≠ficos restantes
    replacements = {
        '¬∞': 'o', '‚Äì': '-', '‚Äî': '-', ''': "'", ''': "'", 
        '"': '"', '"': '"', '‚Ä¶': '...', '¬Æ': '(R)', '¬©': '(C)',
        '¬ø': '?', '¬°': '!'
    }
    
    for char, replacement in replacements.items():
        text = text.replace(char, replacement)
    
    # Filtro final: solo caracteres ASCII imprimibles
    return ''.join(c for c in text if ord(c) < 128 and (c.isprintable() or c.isspace()))

@st.cache_resource
def load_model(model_path):
    """Carga el modelo de TensorFlow/Keras con manejo de compatibilidad"""
    try:
        if os.path.exists(model_path):
            # Configurar para evitar warnings del optimizador
            import warnings
            warnings.filterwarnings('ignore', category=UserWarning, module='keras')
            
            # Cargar modelo con compile=False para evitar problemas de optimizador
            model = tf.keras.models.load_model(model_path, compile=False)
            
            # Recompilar el modelo con configuraci√≥n est√°ndar
            model.compile(
                optimizer='adam',
                loss='sparse_categorical_crossentropy',
                metrics=['accuracy']
            )
            
            return model
        else:
            return None
    except Exception as e:
        error_msg = str(e)
        
        # Detectar errores de compatibilidad espec√≠ficos
        if "keras.src.models.functional" in error_msg or "cannot be imported" in error_msg:
            st.error("‚ùå Error de compatibilidad detectado")
            st.info("üí° Este error indica un problema de compatibilidad entre versiones de TensorFlow/Keras")
            st.info("üîß Soluciones:")
            st.info("   1. Ejecutar: python fix_model_compatibility.py")
            st.info("   2. O usar la versi√≥n simple: streamlit run app_simple.py")
            
            # Bot√≥n para solucionar autom√°ticamente
            if st.button("üîß Solucionar Compatibilidad Autom√°ticamente"):
                with st.spinner("Solucionando problema de compatibilidad..."):
                    try:
                        import subprocess
                        import sys
                        result = subprocess.run([sys.executable, "fix_model_compatibility.py"], 
                                              capture_output=True, text=True)
                        if result.returncode == 0:
                            st.success("‚úÖ Problema de compatibilidad solucionado")
                            st.rerun()
                        else:
                            st.error(f"‚ùå Error: {result.stderr}")
                    except Exception as fix_error:
                        st.error(f"‚ùå Error ejecutando soluci√≥n: {fix_error}")
        
        return None

@st.cache_resource
def load_all_models():
    """Carga todos los modelos disponibles para comparaci√≥n"""
    models = {}
    model_files = [
        "best_sugarcane_modelV1.keras",
        "best_sugarcane_modelV2.keras", 
        "best_sugarcane_modelV3.keras"
    ]
    
    for model_file in model_files:
        model_path = os.path.join(MODEL_DIR, model_file)
        if os.path.exists(model_path):
            model = load_model(model_path)
            if model is not None:
                models[model_file] = model
    
    return models

def preprocess_image(image):
    """
    Preprocesa la imagen de la misma manera que se hizo durante el entrenamiento
    """
    # Convertir PIL Image a numpy array
    img = np.array(image)
    
    # Convertir RGB a BGR (OpenCV usa BGR)
    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
    
    # Redimensionar a 256x256
    img = cv2.resize(img, (256, 256))
    
    # Aplicar CLAHE en espacio LAB (igual que en entrenamiento)
    lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
    cl = clahe.apply(l)
    limg = cv2.merge((cl, a, b))
    img = cv2.cvtColor(limg, cv2.COLOR_LAB2RGB)
    
    # Normalizar a [0,1]
    img = img.astype('float32') / 255.0
    
    # A√±adir dimensi√≥n de batch
    return np.expand_dims(img, axis=0)

def predict_disease(model, processed_image):
    """
    Realiza la predicci√≥n utilizando el modelo cargado
    """
    try:
        if model is not None:
            # Realizar predicci√≥n con el modelo real
            predictions = model.predict(processed_image, verbose=0)
            return predictions
        else:
            # Fallback para demostraci√≥n cuando no hay modelo
            num_classes = len(DISEASE_INFO)
            fake_prediction = np.zeros((1, num_classes))
            predicted_class = random.randint(0, num_classes-1)
            fake_prediction[0, predicted_class] = random.uniform(0.7, 0.95)
            # Distribuir el resto de probabilidad
            remaining = 1.0 - fake_prediction[0, predicted_class]
            other_classes = [i for i in range(num_classes) if i != predicted_class]
            for i, class_idx in enumerate(other_classes):
                fake_prediction[0, class_idx] = remaining / len(other_classes)
            return fake_prediction
    except Exception as e:
        # Fallback en caso de error sin mostrar mensaje de error
        num_classes = len(DISEASE_INFO)
        fake_prediction = np.zeros((1, num_classes))
        fake_prediction[0, 0] = 1.0  # Predicci√≥n por defecto: sana
        return fake_prediction

def predict_with_all_models(processed_image):
    """
    Realiza predicci√≥n con todos los modelos disponibles
    """
    models = load_all_models()
    predictions = {}
    
    if not models:
        st.warning("‚ö†Ô∏è No hay modelos disponibles para comparaci√≥n")
        return None
    
    for model_name, model in models.items():
        try:
            prediction = predict_disease(model, processed_image)
            predictions[model_name] = prediction
        except Exception as e:
            st.error(f"‚ùå Error con modelo {model_name}: {str(e)}")
            continue
    
    return predictions

def get_consensus_prediction(predictions):
    """
    Obtiene predicci√≥n de consenso basada en m√∫ltiples modelos
    """
    if not predictions:
        return None, None, None
    
    # Obtener informaci√≥n de los modelos para ponderar
    model_weights = {}
    for model_name in predictions.keys():
        model_info = load_model_info(model_name)
        if model_info and model_info['test_accuracy'] > 0:
            # Usar la precisi√≥n del modelo como peso
            model_weights[model_name] = model_info['test_accuracy']
        else:
            # Peso por defecto si no hay informaci√≥n
            model_weights[model_name] = 0.5
    
    # Calcular predicci√≥n promedio ponderada
    num_classes = len(DISEASE_INFO)
    weighted_prediction = np.zeros((1, num_classes))
    total_weight = 0
    
    for model_name, prediction in predictions.items():
        weight = model_weights.get(model_name, 0.5)
        weighted_prediction += prediction * weight
        total_weight += weight
    
    if total_weight > 0:
        weighted_prediction /= total_weight
    
    # Obtener clase predicha y confianza
    predicted_class = np.argmax(weighted_prediction[0])
    confidence = weighted_prediction[0][predicted_class] * 100
    
    return weighted_prediction, predicted_class, confidence

def create_probability_chart(prediction, disease_info):
    """Crea gr√°fico de probabilidades"""
    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(12, 6))
    fig.patch.set_facecolor('#1E1E1E')
    ax.set_facecolor('#1E1E1E')
    
    # Crear barras
    class_names = [info['name'] for info in disease_info.values()]
    probabilities = prediction[0] * 100
    colors = [info['color'] for info in disease_info.values()]
    
    bars = ax.bar(class_names, probabilities, color=colors)
    
    # Configurar ejes
    ax.set_ylabel("Probabilidad (%)", color='white')
    ax.set_ylim([0, 100])
    plt.xticks(rotation=45, ha='right', color='white')
    ax.tick_params(axis='y', colors='white')
    
    # A√±adir valores sobre las barras
    for bar in bars:
        height = bar.get_height()
        ax.text(
            bar.get_x() + bar.get_width()/2.,
            height + 1,
            f'{height:.1f}%',
            ha='center',
            va='bottom',
            color='white',
            fontweight='bold'
        )
    
    plt.tight_layout()
    return fig

def create_comparative_chart(predictions, disease_info):
    """Crea gr√°fico comparativo de predicciones de m√∫ltiples modelos"""
    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(15, 8))
    fig.patch.set_facecolor('#1E1E1E')
    ax.set_facecolor('#1E1E1E')
    
    class_names = [info['name'] for info in disease_info.values()]
    model_names = list(predictions.keys())
    
    # Colores para cada modelo
    model_colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7']
    
    # Configurar posiciones de las barras
    x = np.arange(len(class_names))
    width = 0.25
    
    # Crear barras para cada modelo
    for i, (model_name, prediction) in enumerate(predictions.items()):
        probabilities = prediction[0] * 100
        model_label = model_name.replace('best_sugarcane_model', 'Modelo ').replace('.keras', '')
        
        bars = ax.bar(x + i * width, probabilities, width, 
                     label=model_label, color=model_colors[i % len(model_colors)], 
                     alpha=0.8)
        
        # A√±adir valores sobre las barras
        for bar in bars:
            height = bar.get_height()
            if height > 5:  # Solo mostrar si la probabilidad es mayor a 5%
                ax.text(bar.get_x() + bar.get_width()/2., height + 1,
                       f'{height:.1f}%', ha='center', va='bottom',
                       color='white', fontsize=8, fontweight='bold')
    
    # Configurar ejes
    ax.set_ylabel("Probabilidad (%)", color='white')
    ax.set_xlabel("Clases de Enfermedad", color='white')
    ax.set_title("Comparaci√≥n de Predicciones por Modelo", color='white', fontsize=16)
    ax.set_xticks(x + width)
    ax.set_xticklabels(class_names, rotation=45, ha='right', color='white')
    ax.tick_params(axis='y', colors='white')
    ax.legend(loc='upper right')
    ax.set_ylim([0, 100])
    
    plt.tight_layout()
    return fig

def model_comparison():
    """Funci√≥n para comparar diferentes modelos de diagn√≥stico usando datos reales"""
    st.header("üìä Comparaci√≥n de Modelos de Diagn√≥stico")

    # Verificar qu√© modelos est√°n disponibles
    available_models = []
    model_files = [
        "best_sugarcane_modelV1.keras",
        "best_sugarcane_modelV2.keras",
        "best_sugarcane_modelV3.keras"
    ]
    # Tambi√©n incluir cualquier otro modelo .keras en la carpeta
    try:
        model_files = list(set(model_files + [f for f in os.listdir(MODEL_DIR) if f.endswith('.keras')]))
    except:
        pass
    
    for model_file in model_files:
        model_path = os.path.join(MODEL_DIR, model_file)
        if os.path.exists(model_path):
            available_models.append(model_file)
    
    if not available_models:
        st.warning("‚ö†Ô∏è No se encontraron modelos para comparar")
        st.info("üí° Carga modelos en la pesta√±a de Configuraci√≥n para poder compararlos")
        
        # Mostrar informaci√≥n sobre c√≥mo crear modelos de ejemplo
        with st.expander("üîß Crear Modelos de Ejemplo", expanded=False):
            st.markdown("""
            Para crear modelos de ejemplo para comparaci√≥n, puedes:
            
            1. **Usar el modelo actual**: El modelo cargado en la pesta√±a de Configuraci√≥n
            2. **Crear modelos de demostraci√≥n**: Ejecutar scripts de entrenamiento
            3. **Cargar modelos externos**: Subir archivos .keras desde tu computadora
            
            Los modelos se comparar√°n autom√°ticamente cuando est√©n disponibles.
            """)
        return

    # Informaci√≥n sobre los modelos disponibles
    st.success(f"‚úÖ Se encontraron {len(available_models)} modelo(s) para comparar")
    
    # Recopilar datos reales de los modelos
    models_data = {
        'Modelo': [],
        'Precisi√≥n': [],
        'P√©rdida': [],
        'F1-Score Promedio': [],
        'Tama√±o (MB)': [],
        'Fecha Creaci√≥n': [],
        'Estado': []
    }
    
    # Estimaciones de tiempo de inferencia basadas en tama√±o y complejidad
    inference_times = {'V1': 45, 'V2': 65, 'V3': 85}
    
    for model_file in available_models:
        model_path = os.path.join(MODEL_DIR, model_file)
        model_name = model_file.replace('.keras', '')
        models_data['Modelo'].append(model_name)
        
        # Cargar informaci√≥n estad√≠stica real
        model_info = load_model_info(model_file)
        if model_info:
            models_data['Precisi√≥n'].append(model_info['test_accuracy'])
            models_data['P√©rdida'].append(model_info['test_loss'])
            
            # Extraer F1-Score promedio del reporte
            try:
                lines = model_info['full_report'].split('\n')
                f1_score = 0.0
                for line in lines:
                    if 'macro avg' in line and 'f1-score' in line:
                        parts = line.split()
                        f1_score = float(parts[3])
                        break
                models_data['F1-Score Promedio'].append(f1_score)
            except:
                models_data['F1-Score Promedio'].append(0.0)
                
            # Determinar estado del modelo basado en precisi√≥n
            if model_info['test_accuracy'] >= 0.7:
                models_data['Estado'].append('‚úÖ Excelente')
            elif model_info['test_accuracy'] >= 0.5:
                models_data['Estado'].append('‚ö†Ô∏è Aceptable')
            else:
                models_data['Estado'].append('‚ùå Necesita mejoras')
        else:
            models_data['Precisi√≥n'].append(0.0)
            models_data['P√©rdida'].append(0.0)
            models_data['F1-Score Promedio'].append(0.0)
            models_data['Estado'].append('‚ùì Sin informaci√≥n')
        
        # Obtener tama√±o del archivo
        try:
            size_mb = os.path.getsize(model_path) / (1024 * 1024)
            models_data['Tama√±o (MB)'].append(round(size_mb, 2))
            
            # Obtener fecha de creaci√≥n del archivo
            creation_time = os.path.getctime(model_path)
            creation_date = time.strftime('%Y-%m-%d', time.localtime(creation_time))
            models_data['Fecha Creaci√≥n'].append(creation_date)
        except:
            models_data['Tama√±o (MB)'].append(0.0)
            models_data['Fecha Creaci√≥n'].append('N/A')
    
    df = pd.DataFrame(models_data)

    # Resumen de m√©tricas
    st.subheader("üìà Resumen de M√©tricas")
    col1, col2, col3, col4 = st.columns(4)
    
    valid_precision = df[df['Precisi√≥n'] > 0]['Precisi√≥n']
    valid_f1 = df[df['F1-Score Promedio'] > 0]['F1-Score Promedio']
    
    with col1:
        if len(valid_precision) > 0:
            st.metric("Mejor Precisi√≥n", f"{valid_precision.max():.2%}")
        else:
            st.metric("Mejor Precisi√≥n", "N/A")
    with col2:
        if len(valid_precision) > 0:
            st.metric("Promedio Precisi√≥n", f"{valid_precision.mean():.2%}")
        else:
            st.metric("Promedio Precisi√≥n", "N/A")
    with col3:
        if len(valid_f1) > 0:
            st.metric("Mejor F1-Score", f"{valid_f1.max():.3f}")
        else:
            st.metric("Mejor F1-Score", "N/A")
    with col4:
        st.metric("Tama√±o Total", f"{df['Tama√±o (MB)'].sum():.1f} MB")

    # Tabla interactiva mejorada
    st.subheader("üìä Tabla Detallada de M√©tricas")
    
    # Crear tabla con formato condicional
    styled_df = df.copy()
    styled_df['Precisi√≥n'] = styled_df['Precisi√≥n'].apply(lambda x: f"{x:.2%}" if x > 0 else "N/A")
    styled_df['P√©rdida'] = styled_df['P√©rdida'].apply(lambda x: f"{x:.4f}" if x > 0 else "N/A")
    styled_df['F1-Score Promedio'] = styled_df['F1-Score Promedio'].apply(lambda x: f"{x:.3f}" if x > 0 else "N/A")
    
    st.dataframe(styled_df, use_container_width=True)

    # Gr√°ficos mejorados
    st.subheader("üìà Visualizaciones")
    
    # Filtrar modelos con datos v√°lidos para los gr√°ficos
    valid_models = df[df['Precisi√≥n'] > 0]
    
    if len(valid_models) > 0:
        col1, col2 = st.columns(2)
        
        with col1:
            fig1 = px.bar(valid_models, x='Modelo', y='Precisi√≥n', 
                         title='Precisi√≥n por Modelo',
                         color='Precisi√≥n',
                         color_continuous_scale='viridis',
                         text='Precisi√≥n')
            fig1.update_traces(texttemplate='%{text:.1%}', textposition='outside')
            fig1.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(color='white'),
                yaxis=dict(tickformat='.0%')
            )
            st.plotly_chart(fig1, use_container_width=True)
        
        with col2:
            fig2 = px.bar(valid_models, x='Modelo', y='F1-Score Promedio', 
                         title='F1-Score Promedio por Modelo',
                         color='F1-Score Promedio',
                         color_continuous_scale='plasma',
                         text='F1-Score Promedio')
            fig2.update_traces(texttemplate='%{text:.3f}', textposition='outside')
            fig2.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(color='white')
            )
            st.plotly_chart(fig2, use_container_width=True)
        
        # Gr√°fico de p√©rdida vs precisi√≥n
        st.subheader("üìâ An√°lisis de P√©rdida vs Precisi√≥n")
        fig3 = px.scatter(valid_models, x='P√©rdida', y='Precisi√≥n', 
                         size='Tama√±o (MB)', hover_name='Modelo',
                         title='Relaci√≥n entre P√©rdida y Precisi√≥n',
                         color='F1-Score Promedio',
                         color_continuous_scale='RdYlGn')
        fig3.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white')
        )
        st.plotly_chart(fig3, use_container_width=True)
    
    # Gr√°fico de tama√±o de modelos
    if len(available_models) > 1:
        st.subheader("üì¶ Comparaci√≥n de Tama√±os")
        fig4 = px.pie(df, values='Tama√±o (MB)', names='Modelo', 
                      title='Distribuci√≥n del Tama√±o de Modelos')
        fig4.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white')
        )
        st.plotly_chart(fig4, use_container_width=True)
    
    # Recomendaciones mejoradas
    st.subheader("üí° Recomendaciones")
    
    if len(valid_models) > 0:
        best_model = valid_models.loc[valid_models['Precisi√≥n'].idxmax(), 'Modelo']
        best_f1_model = valid_models.loc[valid_models['F1-Score Promedio'].idxmax(), 'Modelo']
        smallest_model = df.loc[df['Tama√±o (MB)'].idxmin(), 'Modelo']
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.info(f"üéØ **Mejor Precisi√≥n**: {best_model}")
        with col2:
            st.info(f"‚öñÔ∏è **Mejor F1-Score**: {best_f1_model}")
        with col3:
            st.info(f"üíæ **M√°s Peque√±o**: {smallest_model}")
        
        # An√°lisis detallado del mejor modelo
        st.subheader("üèÜ An√°lisis del Mejor Modelo")
        best_model_info = load_model_info(best_model + '.keras')
        if best_model_info:
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("**Estad√≠sticas Principales:**")
                st.markdown(f"- Precisi√≥n: {best_model_info['test_accuracy']:.2%}")
                st.markdown(f"- P√©rdida: {best_model_info['test_loss']:.4f}")
                
            with col2:
                st.markdown("**Reporte Detallado:**")
                with st.expander("Ver reporte completo"):
                    st.text(best_model_info['full_report'])
        
        # Mostrar matrices de confusi√≥n
        st.subheader("üìä Matrices de Confusi√≥n")
        matrices_cols = st.columns(min(3, len(valid_models)))
        
        for i, (_, model_row) in enumerate(valid_models.iterrows()):
            if i >= 3:  # Mostrar m√°ximo 3 matrices
                break
            model_name = model_row['Modelo']
            confusion_path = get_confusion_matrix_path(model_name + '.keras')
            
            if confusion_path and os.path.exists(confusion_path):
                with matrices_cols[i]:
                    st.markdown(f"**{model_name}**")
                    st.image(confusion_path, use_column_width=True)
    
    # Exportar comparaci√≥n
    st.subheader("üì§ Exportar Comparaci√≥n")
    if st.button("üìä Exportar Datos de Comparaci√≥n", use_container_width=True):
        csv = styled_df.to_csv(index=False)
        b64 = base64.b64encode(csv.encode()).decode()
        href = f'<a href="data:file/csv;base64,{b64}" download="comparacion_modelos.csv">‚¨áÔ∏è Descargar CSV</a>'
        st.markdown(href, unsafe_allow_html=True)
        st.success("‚úÖ Datos exportados exitosamente")

def generate_pdf_report(image,
                       disease_info: dict,
                       confidence: float,
                       probabilities: np.ndarray,
                       model_name: str = None,
                       all_predictions: dict = None,
                       consensus_prediction: np.ndarray = None):
    """Genera un reporte PDF del diagn√≥stico con comparativa de m√∫ltiples modelos."""
    try:
        if REPORTLAB_AVAILABLE:
            return generate_pdf_reportlab(image, disease_info, confidence, probabilities, model_name, all_predictions, consensus_prediction)
        elif FPDF_AVAILABLE:
            return generate_pdf_fpdf(image, disease_info, confidence, probabilities, model_name, clean_text_robust, all_predictions, consensus_prediction)
        else:
            st.error("‚ùå No hay bibliotecas de PDF disponibles")
            st.info("üí° Instala una de las siguientes bibliotecas:")
            st.info("   - ReportLab (recomendado): `pip install reportlab==4.0.4`")
            st.info("   - FPDF: `pip install fpdf2`")
            return None
    
    except Exception as e:
        st.error(f"‚ùå Error al generar PDF: {str(e)}")
        st.error("Detalles del error:")
        st.code(str(e))

def generate_pdf_reportlab(image,
                          disease_info: dict,
                          confidence: float,
                          probabilities: np.ndarray,
                          model_name: str = None,
                          all_predictions: dict = None,
                          consensus_prediction: np.ndarray = None):
    """Genera PDF usando ReportLab (soporta UTF-8 nativo) con comparativa de m√∫ltiples modelos"""
    try:
        # Crear documento
        out_path = "reporte_diagnostico_cana.pdf"
        doc = SimpleDocTemplate(out_path, pagesize=letter)
        story = []
        
        # Obtener estilos
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=HexColor('#2E7D32'),
            alignment=1  # Centrado
        )
        
        # T√≠tulo
        story.append(Paragraph("üåø Diagn√≥stico Comparativo de Ca√±a de Az√∫car", title_style))
        story.append(Spacer(1, 20))
        
        # Informaci√≥n de consenso de m√∫ltiples modelos
        if all_predictions and len(all_predictions) > 1:
            story.append(Paragraph("<b>An√°lisis con M√∫ltiples Modelos:</b>", styles['Heading2']))
            story.append(Paragraph(f"<b>Modelos utilizados:</b> {len(all_predictions)} modelos", styles['Normal']))
            story.append(Paragraph(f"<b>Diagn√≥stico de consenso:</b> {disease_info['name']}", styles['Normal']))
            story.append(Paragraph(f"<b>Confianza del consenso:</b> {confidence:.1f}%", styles['Normal']))
            story.append(Spacer(1, 20))
            
            # Detalles de cada modelo
            for i, (model_name_iter, prediction) in enumerate(all_predictions.items()):
                model_info = load_model_info(model_name_iter)
                predicted_class = np.argmax(prediction[0])
                model_confidence = prediction[0][predicted_class] * 100
                model_disease = DISEASE_INFO[predicted_class]['name']
                
                story.append(Paragraph(f"<b>Modelo {i+1} ({model_name_iter}):</b>", styles['Heading3']))
                story.append(Paragraph(f"  ‚Ä¢ Diagn√≥stico: {model_disease}", styles['Normal']))
                story.append(Paragraph(f"  ‚Ä¢ Confianza: {model_confidence:.1f}%", styles['Normal']))
                if model_info:
                    story.append(Paragraph(f"  ‚Ä¢ Precisi√≥n del modelo: {model_info['test_accuracy']:.2%}", styles['Normal']))
                story.append(Spacer(1, 10))
        else:
            # Informaci√≥n del modelo √∫nico
            if model_name:
                model_info = load_model_info(model_name)
                story.append(Paragraph(f"<b>Modelo utilizado:</b> {model_name}", styles['Normal']))
                if model_info:
                    story.append(Paragraph(f"<b>Precisi√≥n del modelo:</b> {model_info['test_accuracy']:.2%}", styles['Normal']))
                    story.append(Paragraph(f"<b>P√©rdida de prueba:</b> {model_info['test_loss']:.4f}", styles['Normal']))
                story.append(Spacer(1, 20))
        
        # Imagen
        import tempfile
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_img_file:
            image.save(tmp_img_file.name)
            story.append(Paragraph("<b>Imagen Analizada:</b>", styles['Heading2']))
            story.append(ReportLabImage(tmp_img_file.name, width=4*inch, height=3*inch))
            tmp_img_path = tmp_img_file.name
        story.append(Spacer(1, 20))
        
        # Diagn√≥stico
        story.append(Paragraph(f"<b>Diagn√≥stico:</b> {disease_info['name']}", styles['Heading2']))
        story.append(Paragraph(f"<b>Nivel de Confianza:</b> {confidence:.1f}%", styles['Normal']))
        story.append(Paragraph(f"<b>Descripci√≥n:</b> {disease_info['description']}", styles['Normal']))
        story.append(Spacer(1, 20))
        
        # S√≠ntomas
        story.append(Paragraph("<b>S√≠ntomas Principales:</b>", styles['Heading3']))
        for symptom in disease_info['symptoms'][:3]:
            story.append(Paragraph(f"‚Ä¢ {symptom}", styles['Normal']))
        story.append(Spacer(1, 15))
        
        # Tratamiento
        story.append(Paragraph("<b>Tratamiento Recomendado:</b>", styles['Heading3']))
        for treatment in disease_info['treatment'][:3]:
            story.append(Paragraph(f"‚Ä¢ {treatment}", styles['Normal']))
        story.append(Spacer(1, 15))
        
        # Prevenci√≥n
        story.append(Paragraph("<b>Medidas Preventivas:</b>", styles['Heading3']))
        for prevention in disease_info['prevention'][:2]:
            story.append(Paragraph(f"‚Ä¢ {prevention}", styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Gr√°ficos de probabilidades
        import matplotlib.pyplot as plt
        
        # Gr√°fico comparativo si hay m√∫ltiples modelos
        if all_predictions and len(all_predictions) > 1:
            story.append(Paragraph("<b>Comparaci√≥n de Modelos:</b>", styles['Heading3']))
            comparative_fig = create_comparative_chart(all_predictions, DISEASE_INFO)
            
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_comparative:
                comparative_fig.savefig(tmp_comparative.name, bbox_inches='tight', dpi=150, facecolor='#1E1E1E')
                comparative_path = tmp_comparative.name
            plt.close(comparative_fig)
            
            story.append(ReportLabImage(comparative_path, width=7*inch, height=5*inch))
            story.append(Spacer(1, 20))
        
        # Gr√°fico de consenso o modelo √∫nico
        title = "Distribuci√≥n de Probabilidades (Consenso)" if all_predictions and len(all_predictions) > 1 else "Distribuci√≥n de Probabilidades"
        story.append(Paragraph(f"<b>{title}:</b>", styles['Heading3']))
        
        class_names = [d['name'] for d in DISEASE_INFO.values()]
        probs = (consensus_prediction[0] if consensus_prediction is not None else probabilities[0]) * 100
        fig, ax = plt.subplots(figsize=(8, 5))
        bars = ax.bar(class_names, probs, color=[d['color'] for d in DISEASE_INFO.values()])
        ax.set_ylabel("Probabilidad (%)")
        ax.set_title(title)
        ax.set_ylim([0, 100])
        plt.xticks(rotation=45, ha='right')
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 1, f'{height:.1f}%', 
                   ha='center', va='bottom', fontsize=10)
        plt.tight_layout()
        
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_chart:
            plt.savefig(tmp_chart.name, bbox_inches='tight', dpi=150)
            chart_path = tmp_chart.name
        plt.close(fig)
        
        story.append(ReportLabImage(chart_path, width=6*inch, height=4*inch))
        
        # Matriz de confusi√≥n
        if model_name:
            confusion_matrix_path = get_confusion_matrix_path(model_name)
            if confusion_matrix_path and os.path.exists(confusion_matrix_path):
                story.append(Paragraph("<b>Matriz de Confusi√≥n del Modelo:</b>", styles['Heading3']))
                story.append(ReportLabImage(confusion_matrix_path, width=6*inch, height=4*inch))
        
        # Generar PDF
        doc.build(story)
        
        # Limpiar archivos temporales despu√©s de generar el PDF
        try:
            os.unlink(tmp_img_path)
            os.unlink(chart_path)
            if 'comparative_path' in locals():
                os.unlink(comparative_path)
        except:
            pass
        
        # Preparar descarga
        with open(out_path, "rb") as f:
            b64 = base64.b64encode(f.read()).decode()
        os.remove(out_path)
        
        st.success("‚úÖ Reporte PDF generado exitosamente")
        st.download_button(
            label="‚¨áÔ∏è Descargar Reporte PDF",
            data=base64.b64decode(b64),
            file_name="reporte_diagnostico_cana.pdf",
            mime="application/pdf",
            use_container_width=True,
            help="Haz clic para descargar el reporte PDF del diagn√≥stico"
        )
        
    except Exception as e:
        st.error(f"‚ùå Error al generar PDF con ReportLab: {str(e)}")
        # Fallback a FPDF
        return generate_pdf_fpdf(image, disease_info, confidence, probabilities, model_name, clean_text_robust)

def generate_pdf_fpdf(image,
                     disease_info: dict,
                     confidence: float,
                     probabilities: np.ndarray,
                     model_name: str = None,
                     clean_text_func=None,
                     all_predictions: dict = None,
                     consensus_prediction: np.ndarray = None):
    """Genera PDF usando FPDF con limpieza robusta de texto y comparativa de m√∫ltiples modelos"""
    try:
        if clean_text_func is None:
            def clean_text_func(text):
                import re
                # Eliminar caracteres no ASCII
                return re.sub(r'[^\x00-\x7F]+', '?', str(text))
        
        pdf = FPDF()
        pdf.add_page()

        # --- Encabezado con logo y t√≠tulo ---
        if os.path.exists("logo.png"):
            pdf.image("logo.png", x=10, y=8, w=30, h=30)
        pdf.set_xy(45, 12)
        pdf.set_font("Arial", 'B', 20)
        pdf.set_text_color(46, 125, 50)
        title = "Diagnostico Comparativo de Cana de Azucar" if all_predictions and len(all_predictions) > 1 else "Diagnostico de Cana de Azucar"
        pdf.cell(0, 15, clean_text_func(title), ln=1, align='C')
        pdf.ln(10)
        # L√≠nea divisoria despu√©s del t√≠tulo
        pdf.set_draw_color(46, 125, 50)
        pdf.set_line_width(1)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        pdf.ln(5)

        # --- Informaci√≥n de m√∫ltiples modelos o modelo √∫nico ---
        if all_predictions and len(all_predictions) > 1:
            pdf.set_font("Arial", 'B', 12)
            pdf.set_text_color(33, 150, 243)
            pdf.cell(0, 8, clean_text_func("Analisis con Multiples Modelos"), ln=1)
            pdf.set_font("Arial", size=10)
            pdf.set_text_color(33, 33, 33)
            pdf.cell(0, 6, clean_text_func(f"Modelos utilizados: {len(all_predictions)} modelos"), ln=1)
            pdf.ln(2)
            
            # Detalles de cada modelo
            for i, (model_name_iter, prediction) in enumerate(all_predictions.items()):
                model_info = load_model_info(model_name_iter)
                predicted_class = np.argmax(prediction[0])
                model_confidence = prediction[0][predicted_class] * 100
                model_disease = DISEASE_INFO[predicted_class]['name']
                
                pdf.set_font("Arial", 'B', 10)
                pdf.set_text_color(76, 175, 80)
                pdf.cell(0, 6, clean_text_func(f"Modelo {i+1} ({model_name_iter}):"), ln=1)
                pdf.set_font("Arial", size=9)
                pdf.set_text_color(33, 33, 33)
                pdf.cell(0, 5, clean_text_func(f"  Diagnostico: {model_disease}"), ln=1)
                pdf.cell(0, 5, clean_text_func(f"  Confianza: {model_confidence:.1f}%"), ln=1)
                if model_info:
                    pdf.cell(0, 5, clean_text_func(f"  Precision del modelo: {model_info['test_accuracy']:.2%}"), ln=1)
                pdf.ln(1)
            pdf.ln(3)
        else:
            # Informaci√≥n del modelo √∫nico
            if model_name:
                pdf.set_font("Arial", 'B', 12)
                pdf.set_text_color(33, 150, 243)
                pdf.cell(0, 8, clean_text_func(f"Modelo utilizado: {model_name}"), ln=1)
                
                # Cargar informaci√≥n estad√≠stica del modelo
                model_info = load_model_info(model_name)
                if model_info:
                    pdf.set_font("Arial", size=10)
                    pdf.set_text_color(33, 33, 33)
                    pdf.cell(0, 6, clean_text_func(f"Precision del modelo: {model_info['test_accuracy']:.2%}"), ln=1)
                    pdf.cell(0, 6, clean_text_func(f"Perdida de prueba: {model_info['test_loss']:.4f}"), ln=1)
                pdf.ln(3)

        # --- Imagen analizada ---
        pdf.set_font("Arial", 'B', 12)
        pdf.set_text_color(33, 33, 33)
        pdf.cell(0, 4, clean_text_func("Imagen Analizada:"), ln=1)
        import tempfile
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_img_file:
            image.save(tmp_img_file.name)
            pdf.image(tmp_img_file.name, x=60, w=90, h=60)
            tmp_img_path = tmp_img_file.name
        pdf.ln(10)

        # --- Diagn√≥stico principal ---
        pdf.set_font("Arial", 'B', 14)
        pdf.set_text_color(46, 125, 50)
        pdf.cell(0, 10, clean_text_func(f"{disease_info['name']}"), ln=1)
        pdf.set_font("Arial", size=12)
        pdf.set_text_color(33, 33, 33)
        pdf.cell(0, 8, clean_text_func(f"Nivel de Confianza: {confidence:.1f}%"), ln=1)
        pdf.ln(2)
        pdf.set_font("Arial", size=11)
        pdf.multi_cell(0, 7, clean_text_func(disease_info['description']))
        pdf.ln(2)
        pdf.set_draw_color(200, 200, 200)
        pdf.set_line_width(0.5)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        pdf.ln(3)

        # --- S√≠ntomas ---
        pdf.set_font("Arial", 'B', 12)
        pdf.set_text_color(198, 40, 40)
        pdf.cell(0, 8, clean_text_func("Sintomas Principales:"), ln=1)
        pdf.set_font("Arial", size=11)
        pdf.set_text_color(33, 33, 33)
        for symptom in disease_info['symptoms'][:3]:
            pdf.cell(0, 6, clean_text_func(f"- {symptom}"), ln=1)
        pdf.ln(2)

        # --- Tratamiento ---
        pdf.set_font("Arial", 'B', 12)
        pdf.set_text_color(33, 150, 243)
        pdf.cell(0, 8, clean_text_func("Tratamiento Recomendado:"), ln=1)
        pdf.set_font("Arial", size=11)
        pdf.set_text_color(33, 33, 33)
        for treatment in disease_info['treatment'][:3]:
            pdf.cell(0, 6, clean_text_func(f"- {treatment}"), ln=1)
        pdf.ln(2)

        # --- Prevenci√≥n ---
        pdf.set_font("Arial", 'B', 12)
        pdf.set_text_color(255, 152, 0)
        pdf.cell(0, 8, clean_text_func("Medidas Preventivas:"), ln=1)
        pdf.set_font("Arial", size=11)
        pdf.set_text_color(33, 33, 33)
        for prevention in disease_info['prevention'][:2]:
            pdf.cell(0, 6, clean_text_func(f"- {prevention}"), ln=1)
        pdf.ln(2)

        # --- Gr√°ficos de probabilidades ---
        import matplotlib.pyplot as plt
        
        # Gr√°fico comparativo si hay m√∫ltiples modelos
        if all_predictions and len(all_predictions) > 1:
            pdf.ln(3)
            pdf.set_font("Arial", 'B', 12)
            pdf.set_text_color(76, 175, 80)
            pdf.cell(0, 8, clean_text_func("Comparacion de Modelos:"), ln=1)
            
            comparative_fig = create_comparative_chart(all_predictions, DISEASE_INFO)
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_comparative:
                comparative_fig.savefig(tmp_comparative.name, bbox_inches='tight', dpi=150, facecolor='#1E1E1E')
                comparative_path = tmp_comparative.name
            plt.close(comparative_fig)
            
            pdf.image(comparative_path, x=10, w=190, h=100)
            pdf.ln(10)
        
        # Gr√°fico de consenso o modelo √∫nico
        class_names = [clean_text_func(d['name']) for d in DISEASE_INFO.values()]
        probs = (consensus_prediction[0] if consensus_prediction is not None else probabilities[0]) * 100
        chart_title = "Distribucion de Probabilidades (Consenso)" if all_predictions and len(all_predictions) > 1 else "Distribucion de Probabilidades"
        
        fig, ax = plt.subplots(figsize=(5.5, 3.5))
        bars = ax.bar(class_names, probs, color=[d['color'] for d in DISEASE_INFO.values()])
        ax.set_ylabel("Probabilidad (%)")
        ax.set_ylim([0, 100])
        plt.xticks(rotation=30, ha='right')
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 1, f'{height:.1f}%', ha='center', va='bottom', fontsize=8)
        plt.tight_layout()
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_chart:
            plt.savefig(tmp_chart.name, bbox_inches='tight', dpi=150)
            chart_path = tmp_chart.name
        plt.close(fig)
        
        pdf.ln(3)
        pdf.set_font("Arial", 'B', 12)
        pdf.set_text_color(76, 175, 80)
        pdf.cell(0, 8, clean_text_func(chart_title + ":"), ln=1)
        pdf.image(chart_path, x=25, w=160, h=80)
        pdf.ln(2)

        # --- Probabilidades por clase (texto) ---
        pdf.set_font("Arial", size=10)
        pdf.set_text_color(33, 33, 33)
        display_probs = consensus_prediction[0] if consensus_prediction is not None else probabilities[0]
        for idx, (cls_name, prob) in enumerate(zip(class_names, display_probs)):
            pdf.cell(0, 6, clean_text_func(f"- {cls_name}: {prob*100:.2f}%"), ln=1)
        pdf.ln(2)

        # --- Nueva p√°gina para informaci√≥n t√©cnica ---
        pdf.add_page()
        
        # --- Matriz de confusi√≥n ---
        if model_name:
            confusion_matrix_path = get_confusion_matrix_path(model_name)
            if confusion_matrix_path and os.path.exists(confusion_matrix_path):
                pdf.set_font("Arial", 'B', 14)
                pdf.set_text_color(46, 125, 50)
                pdf.cell(0, 10, clean_text_func("Matriz de Confusion del Modelo"), ln=1)
                pdf.ln(5)
                pdf.image(confusion_matrix_path, x=20, w=170, h=120)
                pdf.ln(10)
        
        # --- Informaci√≥n estad√≠stica completa del modelo ---
        if model_name:
            model_info = load_model_info(model_name)
            if model_info:
                pdf.set_font("Arial", 'B', 14)
                pdf.set_text_color(46, 125, 50)
                pdf.cell(0, 10, clean_text_func("Estadisticas del Modelo"), ln=1)
                pdf.ln(5)
                
                # Mostrar el reporte completo
                pdf.set_font("Courier", size=9)
                pdf.set_text_color(33, 33, 33)
                
                # Dividir el reporte en l√≠neas y procesarlo
                report_lines = model_info['full_report'].split('\n')
                for line in report_lines:
                    if line.strip():
                        # Limpiar la l√≠nea de caracteres especiales
                        clean_line = clean_text_func(line)
                        # Ajustar ancho de l√≠nea para evitar desbordamiento
                        if len(clean_line) > 80:
                            # Dividir l√≠neas largas
                            words = clean_line.split()
                            current_line = ""
                            for word in words:
                                if len(current_line + word) < 80:
                                    current_line += word + " "
                                else:
                                    pdf.cell(0, 4, current_line.strip(), ln=1)
                                    current_line = word + " "
                            if current_line.strip():
                                pdf.cell(0, 4, current_line.strip(), ln=1)
                        else:
                            pdf.cell(0, 4, clean_line, ln=1)
                pdf.ln(5)

        # --- Pie de p√°gina ---
        pdf.set_y(-25)
        pdf.set_draw_color(46, 125, 50)
        pdf.set_line_width(0.7)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        pdf.set_font("Arial", size=8)
        pdf.set_text_color(120, 120, 120)
        pdf.cell(0, 8, clean_text_func(f"Reporte generado el: {time.strftime('%Y-%m-%d %H:%M:%S')}"), ln=1, align='C')
        pdf.cell(0, 6, clean_text_func("Sistema Experto de Diagnostico de Cana de Azucar"), ln=1, align='C')

        # Guardar y preparar descarga
        out_path = "reporte_diagnostico_cana.pdf"
        pdf.output(out_path)
        
        # Limpiar archivos temporales
        try:
            os.unlink(tmp_img_path)
            os.unlink(chart_path)
            if 'comparative_path' in locals():
                os.unlink(comparative_path)
        except:
            pass
        
        with open(out_path, "rb") as f:
            b64 = base64.b64encode(f.read()).decode()
        os.remove(out_path)

        st.success("‚úÖ Reporte PDF generado exitosamente")
        st.download_button(
            label="‚¨áÔ∏è Descargar Reporte PDF",
            data=base64.b64decode(b64),
            file_name="reporte_diagnostico_cana.pdf",
            mime="application/pdf",
            use_container_width=True,
            help="Haz clic para descargar el reporte PDF del diagn√≥stico"
        )
    except Exception as e:
        st.error(f"‚ùå Error al generar PDF: {str(e)}")
        st.error("Detalles del error:")
        st.code(str(e))

# T√≠tulo principal con dise√±o mejorado
st.markdown("<h1>üåø Sistema Experto de Diagn√≥stico de Enfermedades en Ca√±a de Az√∫car</h1>", unsafe_allow_html=True)

# Inicializaci√≥n del estado de la sesi√≥n
if 'model_loaded' not in st.session_state:
    st.session_state.model_loaded = False
if 'model' not in st.session_state:
    st.session_state.model = None
if 'diagnosis_results' not in st.session_state:
    st.session_state.diagnosis_results = None
if 'current_image' not in st.session_state:
    st.session_state.current_image = None

# Crear pesta√±as para mejor organizaci√≥n
tab1, tab2, tab3 = st.tabs(["üì§ Configuraci√≥n", "üîç Diagn√≥stico", "üìä Comparar Modelos"])

with tab1:
    st.markdown("### Configuraci√≥n del Modelo")
    
    # Selector de modelo
    st.markdown("**Selecciona el modelo a utilizar:**")
    selected_model = st.selectbox(
        "Modelos disponibles:",
        AVAILABLE_MODEL_FILES,
        index=AVAILABLE_MODEL_FILES.index(st.session_state.selected_model_file) if st.session_state.selected_model_file in AVAILABLE_MODEL_FILES else 0,
        key="model_selector"
    )
    if selected_model != st.session_state.selected_model_file:
        st.session_state.selected_model_file = selected_model
        st.session_state.model_loaded = False
        st.session_state.model = None
        st.rerun()

    
    with st.expander("‚ÑπÔ∏è Informaci√≥n del Sistema", expanded=True):
        st.markdown("""
            <div class='info-card'>
                <h3>Sobre el Sistema</h3>
                <p>Este sistema experto utiliza inteligencia artificial para detectar:</p>
                <ul class='info-list'>
                    <li>‚úÖ Plantas Sanas (Healthy)</li>
                    <li>üü° Mosaico (Mosaic)</li>
                    <li>üî¥ Pudrici√≥n Roja (Red Rot)</li>
                    <li>üü† Roya (Rust)</li>
                    <li>üíõ Amarillamiento (Yellow)</li>
                </ul>
                <p>El modelo ha sido entrenado con miles de im√°genes para proporcionar diagn√≥sticos precisos y confiables.</p>
            </div>
        """, unsafe_allow_html=True)
        
        # Informaci√≥n sobre el sistema de PDF
        if REPORTLAB_AVAILABLE:
            st.success("‚úÖ ReportLab disponible: Generaci√≥n de PDF con soporte completo UTF-8")
        elif FPDF_AVAILABLE:
            st.info("‚ö†Ô∏è FPDF disponible: Generaci√≥n de PDF b√°sica con limpieza de caracteres")
            st.info("üí° Para mejor calidad de PDF, instala: `pip install reportlab==4.0.4`")
        else:
            st.error("‚ùå No hay bibliotecas de PDF disponibles")
            st.info("üí° Instala una de las siguientes bibliotecas:")
            st.info("   - ReportLab (recomendado): `pip install reportlab==4.0.4`")
            st.info("   - FPDF: `pip install fpdf2`")
            
        if not REPORTLAB_AVAILABLE and st.button("üîß Instalar ReportLab autom√°ticamente"):
            with st.spinner("‚è≥ Instalando ReportLab..."):
                try:
                    import subprocess
                    import sys
                    result = subprocess.run([sys.executable, "-m", "pip", "install", "reportlab==4.0.4"], 
                                          capture_output=True, text=True)
                    if result.returncode == 0:
                        st.success("‚úÖ ReportLab instalado exitosamente")
                        st.info("üîÑ Reinicia la aplicaci√≥n para usar ReportLab")
                    else:
                        st.error(f"‚ùå Error instalando ReportLab: {result.stderr}")
                except Exception as e:
                    st.error(f"‚ùå Error: {str(e)}")
                    
        if not FPDF_AVAILABLE and not REPORTLAB_AVAILABLE and st.button("üîß Instalar FPDF autom√°ticamente"):
            with st.spinner("‚è≥ Instalando FPDF..."):
                try:
                    import subprocess
                    import sys
                    result = subprocess.run([sys.executable, "-m", "pip", "install", "fpdf2"], 
                                          capture_output=True, text=True)
                    if result.returncode == 0:
                        st.success("‚úÖ FPDF instalado exitosamente")
                        st.info("üîÑ Reinicia la aplicaci√≥n para usar FPDF")
                    else:
                        st.error(f"‚ùå Error instalando FPDF: {result.stderr}")
                except Exception as e:
                    st.error(f"‚ùå Error: {str(e)}")
    
    model_file = st.file_uploader("Cargar modelo (.keras)", type=['keras', 'h5'])
    if model_file is not None:
        with st.spinner("‚è≥ Cargando modelo..."):
            model_save_path = os.path.join(MODEL_DIR, model_file.name)
            with open(model_save_path, 'wb') as f:
                f.write(model_file.getbuffer())
            st.success(f"‚úÖ Modelo '{model_file.name}' cargado exitosamente")
            st.session_state.selected_model_file = model_file.name
            st.session_state.model_loaded = False
            st.session_state.model = None
            st.rerun()
    
    # Auto-cargar modelo si existe en el directorio y no se ha cargado
    if not st.session_state.model_loaded and st.session_state.selected_model_file:
        model_path = os.path.join(MODEL_DIR, st.session_state.selected_model_file)
        if os.path.exists(model_path):
            with st.spinner("‚è≥ Cargando modelo seleccionado..."):
                model = load_model(model_path)
                if model is not None:
                    st.session_state.model = model
                    st.session_state.model_loaded = True
                    st.success(f"‚úÖ Modelo '{st.session_state.selected_model_file}' cargado exitosamente")
                else:
                    st.warning(f"‚ö†Ô∏è No se pudo cargar el modelo '{st.session_state.selected_model_file}'. Verifica que el archivo sea v√°lido.")

# Cargar el modelo en la sesi√≥n si est√° marcado como cargado pero no est√° en memoria
if st.session_state.model_loaded and st.session_state.model is None and st.session_state.selected_model_file:
    model_path = os.path.join(MODEL_DIR, st.session_state.selected_model_file)
    model = load_model(model_path)
    if model is not None:
        st.session_state.model = model

with tab2:
    # Verificar si tenemos un modelo disponible
    model_available = (st.session_state.model_loaded or st.session_state.model is not None) and st.session_state.selected_model_file
    
    if not model_available:
        st.warning("‚ö†Ô∏è Por favor, carga primero el modelo en la pesta√±a de Configuraci√≥n")
        st.info("üí° Tambi√©n puedes crear un modelo de demostraci√≥n ejecutando: python create_demo_model.py")
        
        # Bot√≥n para crear modelo de demostraci√≥n
        if st.button("üîß Crear Modelo de Demostraci√≥n", use_container_width=True):
            with st.spinner("‚è≥ Creando modelo de demostraci√≥n..."):
                try:
                    # Importar y ejecutar la creaci√≥n del modelo
                    import subprocess
                    import sys
                    
                    result = subprocess.run([sys.executable, "create_demo_model.py"], 
                                          capture_output=True, text=True)
                    
                    if result.returncode == 0:
                        st.success("‚úÖ Modelo de demostraci√≥n creado exitosamente")
                        st.session_state.model_loaded = True
                        st.rerun()
                    else:
                        st.error(f"‚ùå Error al crear modelo: {result.stderr}")
                except Exception as e:
                    st.error(f"‚ùå Error: {str(e)}")
    else:
        # Crear columnas para mejor organizaci√≥n
        col1, col2 = st.columns([1, 1.5])
        
        with col1:
            st.markdown("### Cargar Imagen")
            image_file = st.file_uploader("Seleccionar imagen de hoja", type=['jpg', 'jpeg', 'png'])
            
            if image_file is not None:
                with st.container():
                    st.markdown("<div class='image-container'>", unsafe_allow_html=True)
                    image = Image.open(image_file)
                    st.image(image, caption=f"Imagen cargada: {image_file.name}", use_column_width=True)
                    st.markdown("</div>", unsafe_allow_html=True)
                
                if st.button("üîç Realizar Diagn√≥stico Comparativo", use_container_width=True):
                    with st.spinner("üîÑ Procesando imagen con m√∫ltiples modelos de IA..."):
                        # Procesar imagen con algoritmos avanzados
                        processed_image = preprocess_image(image)
                        
                        # Realizar predicci√≥n con todos los modelos disponibles
                        all_predictions = predict_with_all_models(processed_image)
                        
                        if all_predictions and len(all_predictions) > 0:
                            # Obtener predicci√≥n de consenso
                            consensus_prediction, predicted_class, confidence = get_consensus_prediction(all_predictions)
                            
                            if consensus_prediction is not None:
                                disease_info = DISEASE_INFO[predicted_class]
                                
                                # Guardar resultados en el estado de la sesi√≥n
                                st.session_state.diagnosis_results = {
                                    'prediction': consensus_prediction,
                                    'predicted_class': predicted_class,
                                    'confidence': confidence,
                                    'disease_info': disease_info,
                                    'all_predictions': all_predictions,
                                    'consensus_prediction': consensus_prediction
                                }
                                st.session_state.current_image = image
                                
                                # Mostrar resumen de modelos utilizados
                                st.success(f"‚úÖ An√°lisis completado con {len(all_predictions)} modelo(s)")
                                for model_name, pred in all_predictions.items():
                                    model_pred_class = np.argmax(pred[0])
                                    model_conf = pred[0][model_pred_class] * 100
                                    model_disease = DISEASE_INFO[model_pred_class]['name']
                                    st.info(f"üìä {model_name}: {model_disease} ({model_conf:.1f}%)")
                        else:
                            st.error("‚ùå No se pudieron cargar los modelos para el an√°lisis")
                            st.info("üí° Verifica que los modelos est√©n disponibles en la carpeta 'models'")
                            
                            # Fallback a modelo √∫nico si est√° disponible
                            if st.session_state.model is not None:
                                st.info("üîÑ Usando modelo √∫nico como alternativa...")
                                prediction = predict_disease(st.session_state.model, processed_image)
                                if prediction is not None:
                                    predicted_class = np.argmax(prediction[0])
                                    confidence = prediction[0][predicted_class] * 100
                                    disease_info = DISEASE_INFO[predicted_class]
                                    
                                    # Guardar resultados en el estado de la sesi√≥n
                                    st.session_state.diagnosis_results = {
                                        'prediction': prediction,
                                        'predicted_class': predicted_class,
                                        'confidence': confidence,
                                        'disease_info': disease_info,
                                        'all_predictions': None,
                                        'consensus_prediction': None
                                    }
                                    st.session_state.current_image = image
                            
        # Mostrar resultados si est√°n disponibles en el estado de la sesi√≥n
        if st.session_state.diagnosis_results is not None:
            results = st.session_state.diagnosis_results
            predicted_class = results['predicted_class']
            confidence = results['confidence']
            disease_info = results['disease_info']
            prediction = results['prediction']
            
            with col2:
                # Resultados principales
                box_class = "healthy" if predicted_class == 0 else "disease"
                diagnosis_title = "Diagn√≥stico de Consenso" if results.get('all_predictions') else "Diagn√≥stico"
                
                st.markdown(f"""
                    <div class='diagnosis-box {box_class}'>
                        <h2>{disease_info['icon']} {diagnosis_title}</h2>
                        <div class='metric-container'>
                            <p style='font-size: 1.8em; font-weight: bold; margin: 0.5rem 0;'>
                                {disease_info['name']}
                            </p>
                            <p style='font-size: 1.2em; margin: 1rem 0;'>
                                Nivel de confianza:
                                <span style='font-size: 1.4em; font-weight: bold; color: {disease_info['color']};'>
                                    {confidence:.1f}%
                                </span>
                            </p>
                        </div>
                    </div>
                """, unsafe_allow_html=True)
                            
                # Crear pesta√±as para la informaci√≥n detallada
                if results.get('all_predictions'):
                    info_tab1, info_tab2, info_tab3, info_tab4 = st.tabs(["üìã Detalles", "üíä Tratamiento", "üìä Comparaci√≥n", "üìà An√°lisis"])
                else:
                    info_tab1, info_tab2, info_tab3 = st.tabs(["üìã Detalles", "üíä Tratamiento", "üìä An√°lisis"])
                
                with info_tab1:
                    st.markdown("<h3 style='color: #81C784; margin-bottom: 1rem;'>üìã Descripci√≥n</h3>", unsafe_allow_html=True)
                    st.markdown(
                        f"""
                        <div style='
                            background-color: #252525;
                            margin: 0.5rem 0;
                            padding: 0.75rem;
                            border-radius: 5px;
                            color: #E0E0E0;
                        '>
                            {disease_info['description']}
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                    
                    st.markdown("<h3 style='color: #81C784; margin-top: 2rem; margin-bottom: 1rem;'>üîç S√≠ntomas</h3>", unsafe_allow_html=True)
                    for symptom in disease_info['symptoms']:
                        st.markdown(
                            f"""
                            <div style='
                                background-color: #252525;
                                margin: 0.5rem 0;
                                padding: 0.75rem;
                                border-radius: 5px;
                                border-left: 4px solid #4CAF50;
                                color: #E0E0E0;
                            '>
                                {symptom}
                            </div>
                            """,
                            unsafe_allow_html=True
                        )

                with info_tab2:
                    st.markdown("<h3 style='color: #81C784; margin-bottom: 1rem;'>üíä Tratamiento Recomendado</h3>", unsafe_allow_html=True)
                    
                    # Contenedor para tratamientos
                    for treatment in disease_info['treatment']:
                        st.markdown(
                            f"""
                            <div style='
                                background-color: #252525;
                                margin: 0.5rem 0;
                                padding: 0.75rem;
                                border-radius: 5px;
                                border-left: 4px solid #4CAF50;
                                color: #E0E0E0;
                            '>
                                {treatment}
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                    
                    st.markdown("<h3 style='color: #81C784; margin-top: 2rem; margin-bottom: 1rem;'>üõ°Ô∏è Medidas Preventivas</h3>", unsafe_allow_html=True)
                    
                    # Contenedor para medidas preventivas
                    for prevention in disease_info['prevention']:
                        st.markdown(
                            f"""
                            <div style='
                                background-color: #252525;
                                margin: 0.5rem 0;
                                padding: 0.75rem;
                                border-radius: 5px;
                                border-left: 4px solid #FF9800;
                                color: #E0E0E0;
                            '>
                                {prevention}
                            </div>
                            """,
                            unsafe_allow_html=True
                        )

                # Pesta√±a de comparaci√≥n (solo si hay m√∫ltiples modelos)
                if results.get('all_predictions'):
                    with info_tab3:
                        st.markdown("### üìä Comparaci√≥n de Modelos")
                        
                        # Gr√°fico comparativo
                        comparative_fig = create_comparative_chart(results['all_predictions'], DISEASE_INFO)
                        st.pyplot(comparative_fig)
                        
                        # Tabla de resultados detallados
                        st.markdown("#### üìã Resultados Detallados por Modelo")
                        comparison_data = []
                        
                        for model_name, pred in results['all_predictions'].items():
                            model_pred_class = np.argmax(pred[0])
                            model_conf = pred[0][model_pred_class] * 100
                            model_disease = DISEASE_INFO[model_pred_class]['name']
                            model_info = load_model_info(model_name)
                            
                            comparison_data.append({
                                'Modelo': model_name.replace('best_sugarcane_model', 'Modelo ').replace('.keras', ''),
                                'Diagn√≥stico': model_disease,
                                'Confianza': f"{model_conf:.1f}%",
                                'Precisi√≥n del Modelo': f"{model_info['test_accuracy']:.2%}" if model_info else "N/A",
                                'Estado': '‚úÖ Coincide' if model_pred_class == predicted_class else '‚ö†Ô∏è Difiere'
                            })
                        
                        comparison_df = pd.DataFrame(comparison_data)
                        st.dataframe(comparison_df, use_container_width=True)
                        
                        # An√°lisis de consenso
                        st.markdown("#### üéØ An√°lisis de Consenso")
                        consensus_info = f"""
                        - **Modelos en consenso**: {sum(1 for _, pred in results['all_predictions'].items() if np.argmax(pred[0]) == predicted_class)} de {len(results['all_predictions'])}
                        - **Diagn√≥stico final**: {disease_info['name']}
                        - **Confianza ponderada**: {confidence:.1f}%
                        """
                        st.markdown(consensus_info)
                
                # Pesta√±a de an√°lisis (ajustada seg√∫n si hay m√∫ltiples modelos o no)
                analysis_tab = info_tab4 if results.get('all_predictions') else info_tab3
                with analysis_tab:
                    title = "üìà An√°lisis del Consenso" if results.get('all_predictions') else "üìä Distribuci√≥n de Probabilidades"
                    st.markdown(f"### {title}")
                    
                    if results.get('consensus_prediction') is not None:
                        fig = create_probability_chart(results['consensus_prediction'], DISEASE_INFO)
                    else:
                        fig = create_probability_chart(prediction, DISEASE_INFO)
                    st.pyplot(fig)
                
                # Bot√≥n para generar PDF
                st.markdown("---")
                st.markdown("### üìÑ Generar Reporte PDF Comparativo")
                if st.button("üìÑ Generar Reporte PDF Comparativo", use_container_width=True):
                    with st.spinner("‚è≥ Generando reporte PDF comparativo..."):
                        # Obtener todos los datos para el PDF
                        all_predictions = results.get('all_predictions')
                        consensus_prediction = results.get('consensus_prediction')
                        model_name = st.session_state.selected_model_file
                        
                        # Si hay m√∫ltiples modelos, usar consenso; sino usar predicci√≥n individual
                        pdf_prediction = consensus_prediction if consensus_prediction is not None else prediction
                        
                        generate_pdf_report(
                            st.session_state.current_image, 
                            disease_info, 
                            confidence, 
                            pdf_prediction, 
                            model_name,
                            all_predictions,
                            consensus_prediction
                        )

# Nueva pesta√±a para comparaci√≥n de modelos
with tab3:
    model_comparison()

# Pie de p√°gina
st.markdown("---")
st.markdown("""
    <div class='footer'>
        <h3>üåø Sistema Experto de Diagn√≥stico</h3>
        <p>Desarrollado para la identificaci√≥n temprana y el manejo efectivo de enfermedades en cultivos de ca√±a de az√∫car</p>
        <p style='color: #666; font-size: 0.9em; margin-top: 1rem;'>
            Utilizando inteligencia artificial y aprendizaje profundo para diagn√≥sticos precisos
        </p>
    </div>
""", unsafe_allow_html=True)